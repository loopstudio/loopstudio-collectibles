{
  "address": "0x4a467E17318b3d6EC3B712dA19353954FCAd9512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHask",
          "type": "bytes32"
        },
        {
          "internalType": "string[70]",
          "name": "_characterUris",
          "type": "string[70]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeRandoms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x10d08725bc0c2d72d048ca6ce0deee7b30871e31696109a5c35e06756f36685b",
  "receipt": {
    "to": null,
    "from": "0xF8fa647Ae8fC360A97dED2AFA4836b0aFF8713AA",
    "contractAddress": "0x4a467E17318b3d6EC3B712dA19353954FCAd9512",
    "transactionIndex": 3,
    "gasUsed": "8147422",
    "logsBloom": "0x
    "blockHash": "0x671049b61405cdefef984d4f388bbd17454e6203caa387a598de3275f0d22af8",
    "transactionHash": "0x10d08725bc0c2d72d048ca6ce0deee7b30871e31696109a5c35e06756f36685b",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27722796,
        "transactionHash": "0x10d08725bc0c2d72d048ca6ce0deee7b30871e31696109a5c35e06756f36685b",
        "address": "0x4a467E17318b3d6EC3B712dA19353954FCAd9512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8fa647ae8fc360a97ded2afa4836b0aff8713aa"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x671049b61405cdefef984d4f388bbd17454e6203caa387a598de3275f0d22af8"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 27722796,
        "transactionHash": "0x10d08725bc0c2d72d048ca6ce0deee7b30871e31696109a5c35e06756f36685b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f8fa647ae8fc360a97ded2afa4836b0aff8713aa",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000004bf634b491e94220000000000000000000000000000000000000000000000000a9b261f361813a8000000000000000000000000000000000000000000000671d9e3aea79f07e45200000000000000000000000000000000000000000000000005dbc2d3ecf97f86000000000000000000000000000000000000000000000671dea311f2e8267874",
        "logIndex": 6,
        "blockHash": "0x671049b61405cdefef984d4f388bbd17454e6203caa387a598de3275f0d22af8"
      }
    ],
    "blockNumber": 27722796,
    "cumulativeGasUsed": "8607206",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1379",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    [
      "ipfs://QmPeiBhqHC7nt7PUnDrdzRQ63Wz7C5W8PjKo3g1zQYUtJS",
      "ipfs://Qmbps5qqNcFFg2SxjxvbQi8DH2viDzujFJtDEqogysk9Tk",
      "ipfs://QmPi7xoBbuLJw2TfxSxYZRWP5mR9yp8cwqYy8HypvfVCjL",
      "ipfs://QmWRaSLaj9wypQDTGqgERwJV3YxbHrvcWauoM7crQX8tQg",
      "ipfs://QmdyQmd7EqZFbsTWa4ggMKrAwH6oAP58J6SYm8oWxXpvCL",
      "ipfs://QmW7T8wSsJRoZdRjATnVjrVC2VZEnd3SSmNE6W4uy6xsKU",
      "ipfs://QmYnVkpsptFuTRKkydVa6YaSr7iJ23uy29z2DQcaqGY4un",
      "ipfs://QmYxAcjqrvhbRWwo2ca3xXqUdJtmmoMmZBaTCfkPBnCxNE",
      "ipfs://QmeMn8N4UyuG9fG7hZ6XEGxCiuhVY7E3oC5k6WsakTfYmw",
      "ipfs://QmWMExLaLwM9enTfHSKi843p1ixQ4TmfYAcqXo2YiSJCwr",
      "ipfs://QmSFiCo4byn9WSQYXvutbfoJLEYHugadCydF912DB5Xbrg",
      "ipfs://QmeTJgKPm3VYbuMd6b2iYxSdcS4TQ45pBxDYHexmviUAzM",
      "ipfs://QmbvZ1aTRN2TyTfWbKVCbDsdsBo5ptRbZrivGDwNvZxrX7",
      "ipfs://QmYZUMx6LmHSooUvZ5zNbjTeus1J5Y86XzNFSMMxpmeBQh",
      "ipfs://Qmea5unPEnasSqwkrRD48gyTFw36vQ44BkPtdivDat5GaQ",
      "ipfs://QmewsVafZ8z79F48nbQKuSLBWaQFSdmnwxowhNocjY4suz",
      "ipfs://QmT5CbvwWtsYHcGQZvg9nrSJLxj21CyBYrh5Up8q2p5CcL",
      "ipfs://Qma98eMux7tgS445KtmLXvDEicZSPfEDK3R7ntn1PWL8C6",
      "ipfs://QmRvhEwXDXFFuusjJ1FYt4cbLP7iHRNuVgVCNPSRFRKLru",
      "ipfs://QmXWunFDaxC78K9uMKCXjAFSgLRjkS25XwvL3SDdjqH8fW",
      "ipfs://QmRKw9mnPPxUgRPxj3KMXJU3UVmU1B3BQSNvkLfrPY1YQi",
      "ipfs://QmexFRKodHrBTvyq6ZiXE7hKiJ8uLDUMVj834rbWLFpNwQ",
      "ipfs://QmZyYdaC1PAb6Zz35WC9yti2Sue28qH9tbxcegUhtTrcbf",
      "ipfs://QmVvwnwMtZEWFCh5ncW5qbHQivyPA1zQ5p8JyNn52PFgy7",
      "ipfs://QmZdQT1QcKUZAXzQs6rYPEyP7CTiiTHxRUyfxBNViTsU45",
      "ipfs://QmRiSBuVpCeRxBxS4cPRtFa4JVHPsqUQ6cgYL7f1tUy14n",
      "ipfs://QmTKJQ5VBvR4HbSLa6mdGZ5iYWU8b9jdXTyR3xzwzDh37R",
      "ipfs://QmZ1fdyzvfTfrcwgM1b9QtP1JQmxAS9yFRLoRePMkVXGQC",
      "ipfs://QmTpcZ8GJBmV5f29K1Xq3txNcXERSqeTew1fS3sqnPUiye",
      "ipfs://QmU1oAg9q49imaAoUrRQmkMnEfDrJ7NcEzZq8FjtUNQ5hd",
      "ipfs://QmcdEn7Y8YchoEbLMi1haK7jKSfMxs3ZTKHJr2quzZHr6F",
      "ipfs://QmY8h3MVVhQWVu7cLGW2XhRFzi2GuGbphdrjd5B7m4A9My",
      "ipfs://QmfQ2WFf9ALBZTS2HNPX6VnLtmpWUA4KpZBswSYJobP4vY",
      "ipfs://QmRZkaqG9Xos7mBicJthxHeKPD4fedmcvBZ2iD3FxochP7",
      "ipfs://QmTyKcsbBDGXPD4qG1V78DRHGssx5YntyPXBCcDZAVYXCc",
      "ipfs://QmRtG9EENY1WRTqY6aJ7NNVsrDJp3FqTeiBnRAg4xtTbPX",
      "ipfs://QmXB5ustkPXJWZG9A8VFN5XoUkgYKWQkYuY8HQhMaufstT",
      "ipfs://QmQV8uyw4h5a9vx2vBk69L587Z3WWgDVcB4ZP5nQak2nWp",
      "ipfs://QmPGPiaf3p6qw6CoPp5cMLuMYD3iKGscyetaYXqKLtTh6e",
      "ipfs://QmVRaL6YzHuGprEFbnKaab98zh7SGdYVhqoHjxxhhAz9jK",
      "ipfs://QmZFkBzbHLLCPxmwcAVVLGmX6pCafrK2GPe5Pkxek3Foao",
      "ipfs://QmRD3qCjrEnoFdj5tzz71xyeajpsK2PraDUDUVRFiBnQaA",
      "ipfs://QmbV99bp6FxyCphEJngCApjZcmTTaVaueDCozjkaQszes1",
      "ipfs://Qmc7Yo2axrHgpwJynxijgLzddSKWzeAj62JiqYdzwAjDzL",
      "ipfs://QmcJzQnYfSfDj5ejFkr7rdCSYmsbrogNTALveWpLtU2oxC",
      "ipfs://QmfTa9SyRMfcy6YDKaAxHYt3wmZ6p4qS2F6YHFAPpmzTz3",
      "ipfs://QmR1jD26xfjt6RJacFnM7J4ofqfhBwDGhyvKxGU1WvJbWv",
      "ipfs://QmWW8794nL7dm6WXjuKRjs8zVgXmKEe76sCXD9XXhocw8U",
      "ipfs://QmQcTFa6ifAc738BWsCH5Kw7vLcP5HYgbHpdYcaDSVMv99",
      "ipfs://QmSQzBnirp8JYPCe3CGfy2jG9TnWAwXN6DM6xR6ZwJP2hb",
      "ipfs://QmZwU3wYNmRd7CTASnA7CsLJJvzVxSkyNpGmAFFc1sLbtL",
      "ipfs://QmcwZfHQQDvKxmEYPuq5u7hLYazvpmDaGSopHWuW1JKkRC",
      "ipfs://QmXFeTQ1HUtgxQ2jbc3C6btyphSCfcVBrdMfWsYpPD8Fty",
      "ipfs://QmY4B257TzNM3h3gV8K3qyi2pC8XVZxD4KoudtjfwitU9v",
      "ipfs://QmdN25ctbAYJEoo94VdNwKmZ4mZCdPa4DyzqJc7tdVK8h2",
      "ipfs://QmVHxg1SiyXatpeAwTHgC9BwwK16m3BD59335mfjPfbi8K",
      "ipfs://QmWFzodW7Br4zMHE2AbLXTu9CGDWdQnomnWNEVWHjWmcp4",
      "ipfs://QmTXEcZB7PGkQpHy4urSgypN4B5SSbsnbPdEA6i27oHUTz",
      "ipfs://Qmd8kcxzFpQDpVkx2bkniT1KSQbUPpPjZ16Sf2gC1v2RaM",
      "ipfs://QmRcuNyXeRdWdAucr1YL7ENEYvrBgsxbYneHbDmU4fwhxE",
      "ipfs://QmQVM7H9ciNWuc4MFrNjhUbr35uF6A7Ddo2KtEy6re41aV",
      "ipfs://QmP5SvzZRRpxTSjqXez5r48innL3mCCunAEtHSUJMnaGdn",
      "ipfs://QmPRSYyjweCpX6bJy7Y2194cLiZUXTLvMrPPZ86Pr3HyZv",
      "ipfs://QmU6Dp6JnJL5Kzz4iM8CkVXFEt6R1XVafhZMgg56CrHnx9",
      "ipfs://QmfJQJtfufLdKeEEYNrZuAmPmzxa7Fo44GoFWkckVmzge1",
      "ipfs://QmZxyauQduwXkVKuvvEAY24fzxdjZgziQNHG65Hofzorvi",
      "ipfs://QmQvKYXyYsDpUbjhQALVujoTRuUdpXNtnerUhrXReJcfFB",
      "ipfs://QmZ5GxaiEpNt1iUcqnYQG1GBe2YtmqNcXKJ2c8f9qvbPHM",
      "ipfs://QmQtc49Ufjz1w1URnRMvKKxJt2aUyjc3W9589uzQCYYnWM",
      "ipfs://QmfWw1v2x8ifQ84QXPQz65fbVhYPpXD6xJ3zXNoGChJJYs"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2c10ca5ecb46a1cef92813d6077513a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHask\",\"type\":\"bytes32\"},{\"internalType\":\"string[70]\",\"name\":\"_characterUris\",\"type\":\"string[70]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRandoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoopNFT.sol\":\"LoopNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LoopNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LoopNFT is VRFConsumerBaseV2, ERC721URIStorage, Ownable {\\n    // VRF variables\\n    VRFCoordinatorV2Interface coordinator;\\n\\n    uint64 private immutable subscriptionId;\\n    address private immutable vrfCoordinator;\\n    bytes32 private immutable keyHash;\\n    uint32 private constant callbackGasLimit = 20000 * (numWords + 10);\\n    uint16 private constant requestConfirmations = 3;\\n    uint32 private constant numWords = 70;\\n\\n    uint256[] public randomWords;\\n    uint256 public requestId;\\n\\n    // NFT variables\\n    uint256 public tokenCounter = 0;\\n    string[] private characterUris;\\n\\n    constructor(\\n        uint64 _subscriptionId,\\n        address _vrfCoordinator,\\n        bytes32 _keyHask,\\n        string[70] memory _characterUris\\n    )\\n        VRFConsumerBaseV2(_vrfCoordinator)\\n        ERC721(\\\"LoopCollectibles\\\", \\\"LoopCollectibles\\\")\\n    {\\n        require(\\n            _characterUris.length == numWords,\\n            \\\"Randoms and URI arrays have different length\\\"\\n        );\\n\\n        coordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        subscriptionId = _subscriptionId;\\n        keyHash = _keyHask;\\n        vrfCoordinator = _vrfCoordinator;\\n        characterUris = _characterUris;\\n    }\\n\\n    function initializeRandoms() external onlyOwner {\\n        require(randomWords.length == 0, \\\"Randoms already initialized\\\");\\n\\n        requestRandomWords();\\n    }\\n\\n    function requestRandomWords() private {\\n        requestId = coordinator.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        randomWords = _randomWords;\\n    }\\n\\n    function mint() public returns (uint256) {\\n        require(characterUris.length > 0, \\\"No available URIs to be minted\\\");\\n        require(randomWords.length > 0, \\\"No available random words\\\");\\n\\n        _safeMint(msg.sender, tokenCounter);\\n        _setTokenURI(tokenCounter, calculateRandomURI());\\n\\n        tokenCounter += 1;\\n\\n        return tokenCounter;\\n    }\\n\\n    function calculateRandomURI() private returns (string memory) {\\n        uint256 index = randomWords[0] % characterUris.length;\\n        string memory uriToMint = characterUris[index];\\n\\n        // Reference: https://www.youtube.com/watch?v=szv2zJcy_Xs\\n        string memory lastUri = characterUris[characterUris.length - 1];\\n        characterUris[index] = lastUri;\\n        characterUris.pop();\\n        randomWords.pop();\\n\\n        return uriToMint;\\n    }\\n}\\n\",\"keccak256\":\"0x8be09f66b23df93c827e894eb02c3f1f235e948e40e8fd6b72de68c0ee25ad88\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040526000600b553480156200001757600080fd5b50604051620043f4380380620043f483398181016040528101906200003d919062000750565b6040518060400160405280601081526020017f4c6f6f70436f6c6c65637469626c6573000000000000000000000000000000008152506040518060400160405280601081526020017f4c6f6f70436f6c6c65637469626c657300000000000000000000000000000000815250848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508160009081620000f0919062000a2c565b50806001908162000102919062000a2c565b50505062000125620001196200022960201b60201c565b6200023160201b60201c565b604663ffffffff1660461462000172576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001699062000b9a565b60405180910390fd5b82600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff1660a08167ffffffffffffffff16815250508160e081815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080600c9060466200021e929190620002f7565b505050505062000bbc565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000344579160200282015b828111156200034357825182908162000332919062000a2c565b509160200191906001019062000318565b5b50905062000353919062000357565b5090565b5b808211156200037b57600081816200037191906200037f565b5060010162000358565b5090565b5080546200038d906200081b565b6000825580601f10620003a15750620003c2565b601f016020900490600052602060002090810190620003c19190620003c5565b5b50565b5b80821115620003e0576000816000905550600101620003c6565b5090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b6200041781620003f8565b81146200042357600080fd5b50565b60008151905062000437816200040c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200046a826200043d565b9050919050565b6200047c816200045d565b81146200048857600080fd5b50565b6000815190506200049c8162000471565b92915050565b6000819050919050565b620004b781620004a2565b8114620004c357600080fd5b50565b600081519050620004d781620004ac565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200052d82620004e2565b810181811067ffffffffffffffff821117156200054f576200054e620004f3565b5b80604052505050565b600062000564620003e4565b905062000572828262000522565b919050565b600067ffffffffffffffff821115620005955762000594620004f3565b5b602082029050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620005c857620005c7620004f3565b5b620005d382620004e2565b9050602081019050919050565b60005b8381101562000600578082015181840152602081019050620005e3565b8381111562000610576000848401525b50505050565b60006200062d6200062784620005aa565b62000558565b9050828152602081018484840111156200064c576200064b620005a5565b5b62000659848285620005e0565b509392505050565b600082601f830112620006795762000678620004dd565b5b81516200068b84826020860162000616565b91505092915050565b6000620006ab620006a58462000577565b62000558565b90508060208402830185811115620006c857620006c7620005a0565b5b835b818110156200071657805167ffffffffffffffff811115620006f157620006f0620004dd565b5b80860162000700898262000661565b85526020850194505050602081019050620006ca565b5050509392505050565b600082601f830112620007385762000737620004dd565b5b60466200074784828562000694565b91505092915050565b600080600080608085870312156200076d576200076c620003ee565b5b60006200077d8782880162000426565b945050602062000790878288016200048b565b9350506040620007a387828801620004c6565b925050606085015167ffffffffffffffff811115620007c757620007c6620003f3565b5b620007d58782880162000720565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200083457607f821691505b6020821081036200084a5762000849620007ec565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008b47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000875565b620008c0868362000875565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200090d620009076200090184620008d8565b620008e2565b620008d8565b9050919050565b6000819050919050565b6200092983620008ec565b62000941620009388262000914565b84845462000882565b825550505050565b600090565b6200095862000949565b620009658184846200091e565b505050565b5b818110156200098d57620009816000826200094e565b6001810190506200096b565b5050565b601f821115620009dc57620009a68162000850565b620009b18462000865565b81016020851015620009c1578190505b620009d9620009d08562000865565b8301826200096a565b50505b505050565b600082821c905092915050565b600062000a0160001984600802620009e1565b1980831691505092915050565b600062000a1c8383620009ee565b9150826002028217905092915050565b62000a3782620007e1565b67ffffffffffffffff81111562000a535762000a52620004f3565b5b62000a5f82546200081b565b62000a6c82828562000991565b600060209050601f83116001811462000aa4576000841562000a8f578287015190505b62000a9b858262000a0e565b86555062000b0b565b601f19841662000ab48662000850565b60005b8281101562000ade5784890151825560018201915060208501945060208101905062000ab7565b8683101562000afe578489015162000afa601f891682620009ee565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f52616e646f6d7320616e6420555249206172726179732068617665206469666660008201527f6572656e74206c656e6774680000000000000000000000000000000000000000602082015250565b600062000b82602c8362000b13565b915062000b8f8262000b24565b604082019050919050565b6000602082019050818103600083015262000bb58162000b73565b9050919050565b60805160a05160c05160e0516137fa62000bfa600039600061197401526000505060006119950152600081816107cd015261082101526137fa6000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063beff730f1161007c578063beff730f1461034e578063c87b56dd1461037e578063d082e381146103ae578063e51edc94146103cc578063e985e9c5146103d6578063f2fde38b1461040657610141565b8063715018a6146102d05780638da5cb5b146102da57806395d89b41146102f8578063a22cb46514610316578063b88d4fde1461033257610141565b80631249c58b1161010a5780631249c58b146101fe5780631fe543e31461021c57806323b872dd1461023857806342842e0e146102545780636352211e1461027057806370a08231146102a057610141565b80626d6cae1461014657806301ffc9a71461016457806306fdde0314610194578063081812fc146101b2578063095ea7b3146101e2575b600080fd5b61014e610422565b60405161015b91906120b5565b60405180910390f35b61017e6004803603810190610179919061213c565b610428565b60405161018b9190612184565b60405180910390f35b61019c61050a565b6040516101a99190612238565b60405180910390f35b6101cc60048036038101906101c79190612286565b61059c565b6040516101d991906122f4565b60405180910390f35b6101fc60048036038101906101f7919061233b565b6105e2565b005b6102066106f9565b60405161021391906120b5565b60405180910390f35b610236600480360381019061023191906124c3565b6107cb565b005b610252600480360381019061024d919061251f565b61088b565b005b61026e6004803603810190610269919061251f565b6108eb565b005b61028a60048036038101906102859190612286565b61090b565b60405161029791906122f4565b60405180910390f35b6102ba60048036038101906102b59190612572565b6109bc565b6040516102c791906120b5565b60405180910390f35b6102d8610a73565b005b6102e2610a87565b6040516102ef91906122f4565b60405180910390f35b610300610ab1565b60405161030d9190612238565b60405180910390f35b610330600480360381019061032b91906125cb565b610b43565b005b61034c600480360381019061034791906126c0565b610b59565b005b61036860048036038101906103639190612286565b610bbb565b60405161037591906120b5565b60405180910390f35b61039860048036038101906103939190612286565b610bdf565b6040516103a59190612238565b60405180910390f35b6103b6610cf1565b6040516103c391906120b5565b60405180910390f35b6103d4610cf7565b005b6103f060048036038101906103eb9190612743565b610d51565b6040516103fd9190612184565b60405180910390f35b610420600480360381019061041b9190612572565b610de5565b005b600a5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610503575061050282610e68565b5b9050919050565b606060008054610519906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906127b2565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ed2565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ed8261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490612855565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067c610f1d565b73ffffffffffffffffffffffffffffffffffffffff1614806106ab57506106aa816106a5610f1d565b610d51565b5b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906128e7565b60405180910390fd5b6106f48383610f25565b505050565b600080600c8054905011610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612953565b60405180910390fd5b60006009805490501161078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906129bf565b60405180910390fd5b61079633600b54610fde565b6107a9600b546107a4610ffc565b611226565b6001600b60008282546107bc9190612a0e565b92505081905550600b54905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610874929190612a64565b60405180910390fd5b6108878282611293565b5050565b61089c610896610f1d565b826112ae565b6108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612aff565b60405180910390fd5b6108e6838383611343565b505050565b61090683838360405180602001604052806000815250610b59565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90612b6b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612bfd565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a7b6115a9565b610a856000611627565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ac0906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec906127b2565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b5050505050905090565b610b55610b4e610f1d565b83836116ed565b5050565b610b6a610b64610f1d565b836112ae565b610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090612aff565b60405180910390fd5b610bb584848484611859565b50505050565b60098181548110610bcb57600080fd5b906000526020600020016000915090505481565b6060610bea82610ed2565b6000600660008481526020019081526020016000208054610c0a906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c36906127b2565b8015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b505050505090506000610c946118b5565b90506000815103610ca9578192505050610cec565b600082511115610cde578082604051602001610cc6929190612c59565b60405160208183030381529060405292505050610cec565b610ce7846118cc565b925050505b919050565b600b5481565b610cff6115a9565b600060098054905014610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90612cc9565b60405180910390fd5b610d4f611934565b565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610ded6115a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5390612d5b565b60405180910390fd5b610e6581611627565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610edb81611a3e565b610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190612b6b565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f988361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610ff8828260405180602001604052806000815250611aaa565b5050565b60606000600c80549050600960008154811061101b5761101a612d7b565b5b90600052602060002001546110309190612dd9565b90506000600c828154811061104857611047612d7b565b5b90600052602060002001805461105d906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611089906127b2565b80156110d65780601f106110ab576101008083540402835291602001916110d6565b820191906000526020600020905b8154815290600101906020018083116110b957829003601f168201915b505050505090506000600c6001600c805490506110f39190612e0a565b8154811061110457611103612d7b565b5b906000526020600020018054611119906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611145906127b2565b80156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b5050505050905080600c84815481106111ae576111ad612d7b565b5b9060005260206000200190816111c49190612fea565b50600c8054806111d7576111d66130bc565b5b6001900381819060005260206000200160006111f39190611ff2565b90556009805480611207576112066130bc565b5b6001900381819060005260206000200160009055905581935050505090565b61122f82611a3e565b61126e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112659061315d565b60405180910390fd5b8060066000848152602001908152602001600020908161128e9190612fea565b505050565b80600990805190602001906112a9929190612032565b505050565b6000806112ba8361090b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806112fc57506112fb8185610d51565b5b8061133a57508373ffffffffffffffffffffffffffffffffffffffff166113228461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113638261090b565b73ffffffffffffffffffffffffffffffffffffffff16146113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906131ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90613281565b60405180910390fd5b611433838383611b05565b61143e600082610f25565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461148e9190612e0a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114e59190612a0e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115a4838383611b0a565b505050565b6115b1610f1d565b73ffffffffffffffffffffffffffffffffffffffff166115cf610a87565b73ffffffffffffffffffffffffffffffffffffffff1614611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c906132ed565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361175b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175290613359565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161184c9190612184565b60405180910390a3505050565b611864848484611343565b61187084848484611b0f565b6118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a6906133eb565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606118d782610ed2565b60006118e16118b5565b90506000815111611901576040518060200160405280600081525061192c565b8061190b84611c96565b60405160200161191c929190612c59565b6040516020818303038152906040525b915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003600a60466119c4919061341b565b614e206119d19190613455565b60466040518663ffffffff1660e01b81526004016119f39594939291906134fb565b6020604051808303816000875af1158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190613563565b600a81905550565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611ab48383611df6565b611ac16000848484611b0f565b611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af7906133eb565b60405180910390fd5b505050565b505050565b505050565b6000611b308473ffffffffffffffffffffffffffffffffffffffff16611fcf565b15611c89578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b59610f1d565b8786866040518563ffffffff1660e01b8152600401611b7b94939291906135e5565b6020604051808303816000875af1925050508015611bb757506040513d601f19601f82011682018060405250810190611bb49190613646565b60015b611c39573d8060008114611be7576040519150601f19603f3d011682016040523d82523d6000602084013e611bec565b606091505b506000815103611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c28906133eb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c8e565b600190505b949350505050565b606060008203611cdd576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611df1565b600082905060005b60008214611d0f578080611cf890613673565b915050600a82611d0891906136bb565b9150611ce5565b60008167ffffffffffffffff811115611d2b57611d2a612380565b5b6040519080825280601f01601f191660200182016040528015611d5d5781602001600182028036833780820191505090505b5090505b60008514611dea57600182611d769190612e0a565b9150600a85611d859190612dd9565b6030611d919190612a0e565b60f81b818381518110611da757611da6612d7b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611de391906136bb565b9450611d61565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90613738565b60405180910390fd5b611e6e81611a3e565b15611eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea5906137a4565b60405180910390fd5b611eba60008383611b05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f0a9190612a0e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fcb60008383611b0a565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b508054611ffe906127b2565b6000825580601f10612010575061202f565b601f01602090049060005260206000209081019061202e919061207f565b5b50565b82805482825590600052602060002090810192821561206e579160200282015b8281111561206d578251825591602001919060010190612052565b5b50905061207b919061207f565b5090565b5b80821115612098576000816000905550600101612080565b5090565b6000819050919050565b6120af8161209c565b82525050565b60006020820190506120ca60008301846120a6565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612119816120e4565b811461212457600080fd5b50565b60008135905061213681612110565b92915050565b600060208284031215612152576121516120da565b5b600061216084828501612127565b91505092915050565b60008115159050919050565b61217e81612169565b82525050565b60006020820190506121996000830184612175565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121d95780820151818401526020810190506121be565b838111156121e8576000848401525b50505050565b6000601f19601f8301169050919050565b600061220a8261219f565b61221481856121aa565b93506122248185602086016121bb565b61222d816121ee565b840191505092915050565b6000602082019050818103600083015261225281846121ff565b905092915050565b6122638161209c565b811461226e57600080fd5b50565b6000813590506122808161225a565b92915050565b60006020828403121561229c5761229b6120da565b5b60006122aa84828501612271565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122de826122b3565b9050919050565b6122ee816122d3565b82525050565b600060208201905061230960008301846122e5565b92915050565b612318816122d3565b811461232357600080fd5b50565b6000813590506123358161230f565b92915050565b60008060408385031215612352576123516120da565b5b600061236085828601612326565b925050602061237185828601612271565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123b8826121ee565b810181811067ffffffffffffffff821117156123d7576123d6612380565b5b80604052505050565b60006123ea6120d0565b90506123f682826123af565b919050565b600067ffffffffffffffff82111561241657612415612380565b5b602082029050602081019050919050565b600080fd5b600061243f61243a846123fb565b6123e0565b9050808382526020820190506020840283018581111561246257612461612427565b5b835b8181101561248b57806124778882612271565b845260208401935050602081019050612464565b5050509392505050565b600082601f8301126124aa576124a961237b565b5b81356124ba84826020860161242c565b91505092915050565b600080604083850312156124da576124d96120da565b5b60006124e885828601612271565b925050602083013567ffffffffffffffff811115612509576125086120df565b5b61251585828601612495565b9150509250929050565b600080600060608486031215612538576125376120da565b5b600061254686828701612326565b935050602061255786828701612326565b925050604061256886828701612271565b9150509250925092565b600060208284031215612588576125876120da565b5b600061259684828501612326565b91505092915050565b6125a881612169565b81146125b357600080fd5b50565b6000813590506125c58161259f565b92915050565b600080604083850312156125e2576125e16120da565b5b60006125f085828601612326565b9250506020612601858286016125b6565b9150509250929050565b600080fd5b600067ffffffffffffffff82111561262b5761262a612380565b5b612634826121ee565b9050602081019050919050565b82818337600083830152505050565b600061266361265e84612610565b6123e0565b90508281526020810184848401111561267f5761267e61260b565b5b61268a848285612641565b509392505050565b600082601f8301126126a7576126a661237b565b5b81356126b7848260208601612650565b91505092915050565b600080600080608085870312156126da576126d96120da565b5b60006126e887828801612326565b94505060206126f987828801612326565b935050604061270a87828801612271565b925050606085013567ffffffffffffffff81111561272b5761272a6120df565b5b61273787828801612692565b91505092959194509250565b6000806040838503121561275a576127596120da565b5b600061276885828601612326565b925050602061277985828601612326565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127ca57607f821691505b6020821081036127dd576127dc612783565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061283f6021836121aa565b915061284a826127e3565b604082019050919050565b6000602082019050818103600083015261286e81612832565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006128d1603e836121aa565b91506128dc82612875565b604082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b7f4e6f20617661696c61626c65205552497320746f206265206d696e7465640000600082015250565b600061293d601e836121aa565b915061294882612907565b602082019050919050565b6000602082019050818103600083015261296c81612930565b9050919050565b7f4e6f20617661696c61626c652072616e646f6d20776f72647300000000000000600082015250565b60006129a96019836121aa565b91506129b482612973565b602082019050919050565b600060208201905081810360008301526129d88161299c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a198261209c565b9150612a248361209c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a5957612a586129df565b5b828201905092915050565b6000604082019050612a7960008301856122e5565b612a8660208301846122e5565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612ae9602e836121aa565b9150612af482612a8d565b604082019050919050565b60006020820190508181036000830152612b1881612adc565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b556018836121aa565b9150612b6082612b1f565b602082019050919050565b60006020820190508181036000830152612b8481612b48565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612be76029836121aa565b9150612bf282612b8b565b604082019050919050565b60006020820190508181036000830152612c1681612bda565b9050919050565b600081905092915050565b6000612c338261219f565b612c3d8185612c1d565b9350612c4d8185602086016121bb565b80840191505092915050565b6000612c658285612c28565b9150612c718284612c28565b91508190509392505050565b7f52616e646f6d7320616c726561647920696e697469616c697a65640000000000600082015250565b6000612cb3601b836121aa565b9150612cbe82612c7d565b602082019050919050565b60006020820190508181036000830152612ce281612ca6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d456026836121aa565b9150612d5082612ce9565b604082019050919050565b60006020820190508181036000830152612d7481612d38565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612de48261209c565b9150612def8361209c565b925082612dff57612dfe612daa565b5b828206905092915050565b6000612e158261209c565b9150612e208361209c565b925082821015612e3357612e326129df565b5b828203905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ea07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e63565b612eaa8683612e63565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ee7612ee2612edd8461209c565b612ec2565b61209c565b9050919050565b6000819050919050565b612f0183612ecc565b612f15612f0d82612eee565b848454612e70565b825550505050565b600090565b612f2a612f1d565b612f35818484612ef8565b505050565b5b81811015612f5957612f4e600082612f22565b600181019050612f3b565b5050565b601f821115612f9e57612f6f81612e3e565b612f7884612e53565b81016020851015612f87578190505b612f9b612f9385612e53565b830182612f3a565b50505b505050565b600082821c905092915050565b6000612fc160001984600802612fa3565b1980831691505092915050565b6000612fda8383612fb0565b9150826002028217905092915050565b612ff38261219f565b67ffffffffffffffff81111561300c5761300b612380565b5b61301682546127b2565b613021828285612f5d565b600060209050601f8311600181146130545760008415613042578287015190505b61304c8582612fce565b8655506130b4565b601f19841661306286612e3e565b60005b8281101561308a57848901518255600182019150602085019450602081019050613065565b868310156130a757848901516130a3601f891682612fb0565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613147602e836121aa565b9150613152826130eb565b604082019050919050565b600060208201905081810360008301526131768161313a565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131d96025836121aa565b91506131e48261317d565b604082019050919050565b60006020820190508181036000830152613208816131cc565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061326b6024836121aa565b91506132768261320f565b604082019050919050565b6000602082019050818103600083015261329a8161325e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132d76020836121aa565b91506132e2826132a1565b602082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006133436019836121aa565b915061334e8261330d565b602082019050919050565b6000602082019050818103600083015261337281613336565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006133d56032836121aa565b91506133e082613379565b604082019050919050565b60006020820190508181036000830152613404816133c8565b9050919050565b600063ffffffff82169050919050565b60006134268261340b565b91506134318361340b565b92508263ffffffff0382111561344a576134496129df565b5b828201905092915050565b60006134608261340b565b915061346b8361340b565b92508163ffffffff0483118215151615613488576134876129df565b5b828202905092915050565b6000819050919050565b6134a681613493565b82525050565b600067ffffffffffffffff82169050919050565b6134c9816134ac565b82525050565b600061ffff82169050919050565b6134e6816134cf565b82525050565b6134f58161340b565b82525050565b600060a082019050613510600083018861349d565b61351d60208301876134c0565b61352a60408301866134dd565b61353760608301856134ec565b61354460808301846134ec565b9695505050505050565b60008151905061355d8161225a565b92915050565b600060208284031215613579576135786120da565b5b60006135878482850161354e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006135b782613590565b6135c1818561359b565b93506135d18185602086016121bb565b6135da816121ee565b840191505092915050565b60006080820190506135fa60008301876122e5565b61360760208301866122e5565b61361460408301856120a6565b818103606083015261362681846135ac565b905095945050505050565b60008151905061364081612110565b92915050565b60006020828403121561365c5761365b6120da565b5b600061366a84828501613631565b91505092915050565b600061367e8261209c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136b0576136af6129df565b5b600182019050919050565b60006136c68261209c565b91506136d18361209c565b9250826136e1576136e0612daa565b5b828204905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137226020836121aa565b915061372d826136ec565b602082019050919050565b6000602082019050818103600083015261375181613715565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061378e601c836121aa565b915061379982613758565b602082019050919050565b600060208201905081810360008301526137bd81613781565b905091905056fea264697066735822122082de98ad0e2baa5b3901c74ef43a70d58b6febad01b330b643a525cd685947cf64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063beff730f1161007c578063beff730f1461034e578063c87b56dd1461037e578063d082e381146103ae578063e51edc94146103cc578063e985e9c5146103d6578063f2fde38b1461040657610141565b8063715018a6146102d05780638da5cb5b146102da57806395d89b41146102f8578063a22cb46514610316578063b88d4fde1461033257610141565b80631249c58b1161010a5780631249c58b146101fe5780631fe543e31461021c57806323b872dd1461023857806342842e0e146102545780636352211e1461027057806370a08231146102a057610141565b80626d6cae1461014657806301ffc9a71461016457806306fdde0314610194578063081812fc146101b2578063095ea7b3146101e2575b600080fd5b61014e610422565b60405161015b91906120b5565b60405180910390f35b61017e6004803603810190610179919061213c565b610428565b60405161018b9190612184565b60405180910390f35b61019c61050a565b6040516101a99190612238565b60405180910390f35b6101cc60048036038101906101c79190612286565b61059c565b6040516101d991906122f4565b60405180910390f35b6101fc60048036038101906101f7919061233b565b6105e2565b005b6102066106f9565b60405161021391906120b5565b60405180910390f35b610236600480360381019061023191906124c3565b6107cb565b005b610252600480360381019061024d919061251f565b61088b565b005b61026e6004803603810190610269919061251f565b6108eb565b005b61028a60048036038101906102859190612286565b61090b565b60405161029791906122f4565b60405180910390f35b6102ba60048036038101906102b59190612572565b6109bc565b6040516102c791906120b5565b60405180910390f35b6102d8610a73565b005b6102e2610a87565b6040516102ef91906122f4565b60405180910390f35b610300610ab1565b60405161030d9190612238565b60405180910390f35b610330600480360381019061032b91906125cb565b610b43565b005b61034c600480360381019061034791906126c0565b610b59565b005b61036860048036038101906103639190612286565b610bbb565b60405161037591906120b5565b60405180910390f35b61039860048036038101906103939190612286565b610bdf565b6040516103a59190612238565b60405180910390f35b6103b6610cf1565b6040516103c391906120b5565b60405180910390f35b6103d4610cf7565b005b6103f060048036038101906103eb9190612743565b610d51565b6040516103fd9190612184565b60405180910390f35b610420600480360381019061041b9190612572565b610de5565b005b600a5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610503575061050282610e68565b5b9050919050565b606060008054610519906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906127b2565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ed2565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ed8261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490612855565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067c610f1d565b73ffffffffffffffffffffffffffffffffffffffff1614806106ab57506106aa816106a5610f1d565b610d51565b5b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e1906128e7565b60405180910390fd5b6106f48383610f25565b505050565b600080600c8054905011610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612953565b60405180910390fd5b60006009805490501161078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906129bf565b60405180910390fd5b61079633600b54610fde565b6107a9600b546107a4610ffc565b611226565b6001600b60008282546107bc9190612a0e565b92505081905550600b54905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610874929190612a64565b60405180910390fd5b6108878282611293565b5050565b61089c610896610f1d565b826112ae565b6108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612aff565b60405180910390fd5b6108e6838383611343565b505050565b61090683838360405180602001604052806000815250610b59565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90612b6b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612bfd565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a7b6115a9565b610a856000611627565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ac0906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec906127b2565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b5050505050905090565b610b55610b4e610f1d565b83836116ed565b5050565b610b6a610b64610f1d565b836112ae565b610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090612aff565b60405180910390fd5b610bb584848484611859565b50505050565b60098181548110610bcb57600080fd5b906000526020600020016000915090505481565b6060610bea82610ed2565b6000600660008481526020019081526020016000208054610c0a906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c36906127b2565b8015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b505050505090506000610c946118b5565b90506000815103610ca9578192505050610cec565b600082511115610cde578082604051602001610cc6929190612c59565b60405160208183030381529060405292505050610cec565b610ce7846118cc565b925050505b919050565b600b5481565b610cff6115a9565b600060098054905014610d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3e90612cc9565b60405180910390fd5b610d4f611934565b565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610ded6115a9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5390612d5b565b60405180910390fd5b610e6581611627565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610edb81611a3e565b610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190612b6b565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610f988361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610ff8828260405180602001604052806000815250611aaa565b5050565b60606000600c80549050600960008154811061101b5761101a612d7b565b5b90600052602060002001546110309190612dd9565b90506000600c828154811061104857611047612d7b565b5b90600052602060002001805461105d906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611089906127b2565b80156110d65780601f106110ab576101008083540402835291602001916110d6565b820191906000526020600020905b8154815290600101906020018083116110b957829003601f168201915b505050505090506000600c6001600c805490506110f39190612e0a565b8154811061110457611103612d7b565b5b906000526020600020018054611119906127b2565b80601f0160208091040260200160405190810160405280929190818152602001828054611145906127b2565b80156111925780601f1061116757610100808354040283529160200191611192565b820191906000526020600020905b81548152906001019060200180831161117557829003601f168201915b5050505050905080600c84815481106111ae576111ad612d7b565b5b9060005260206000200190816111c49190612fea565b50600c8054806111d7576111d66130bc565b5b6001900381819060005260206000200160006111f39190611ff2565b90556009805480611207576112066130bc565b5b6001900381819060005260206000200160009055905581935050505090565b61122f82611a3e565b61126e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112659061315d565b60405180910390fd5b8060066000848152602001908152602001600020908161128e9190612fea565b505050565b80600990805190602001906112a9929190612032565b505050565b6000806112ba8361090b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806112fc57506112fb8185610d51565b5b8061133a57508373ffffffffffffffffffffffffffffffffffffffff166113228461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113638261090b565b73ffffffffffffffffffffffffffffffffffffffff16146113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b0906131ef565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90613281565b60405180910390fd5b611433838383611b05565b61143e600082610f25565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461148e9190612e0a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114e59190612a0e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115a4838383611b0a565b505050565b6115b1610f1d565b73ffffffffffffffffffffffffffffffffffffffff166115cf610a87565b73ffffffffffffffffffffffffffffffffffffffff1614611625576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161c906132ed565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361175b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175290613359565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161184c9190612184565b60405180910390a3505050565b611864848484611343565b61187084848484611b0f565b6118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a6906133eb565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606118d782610ed2565b60006118e16118b5565b90506000815111611901576040518060200160405280600081525061192c565b8061190b84611c96565b60405160200161191c929190612c59565b6040516020818303038152906040525b915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003600a60466119c4919061341b565b614e206119d19190613455565b60466040518663ffffffff1660e01b81526004016119f39594939291906134fb565b6020604051808303816000875af1158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a369190613563565b600a81905550565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611ab48383611df6565b611ac16000848484611b0f565b611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af7906133eb565b60405180910390fd5b505050565b505050565b505050565b6000611b308473ffffffffffffffffffffffffffffffffffffffff16611fcf565b15611c89578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b59610f1d565b8786866040518563ffffffff1660e01b8152600401611b7b94939291906135e5565b6020604051808303816000875af1925050508015611bb757506040513d601f19601f82011682018060405250810190611bb49190613646565b60015b611c39573d8060008114611be7576040519150601f19603f3d011682016040523d82523d6000602084013e611bec565b606091505b506000815103611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c28906133eb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c8e565b600190505b949350505050565b606060008203611cdd576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611df1565b600082905060005b60008214611d0f578080611cf890613673565b915050600a82611d0891906136bb565b9150611ce5565b60008167ffffffffffffffff811115611d2b57611d2a612380565b5b6040519080825280601f01601f191660200182016040528015611d5d5781602001600182028036833780820191505090505b5090505b60008514611dea57600182611d769190612e0a565b9150600a85611d859190612dd9565b6030611d919190612a0e565b60f81b818381518110611da757611da6612d7b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611de391906136bb565b9450611d61565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5c90613738565b60405180910390fd5b611e6e81611a3e565b15611eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea5906137a4565b60405180910390fd5b611eba60008383611b05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f0a9190612a0e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fcb60008383611b0a565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b508054611ffe906127b2565b6000825580601f10612010575061202f565b601f01602090049060005260206000209081019061202e919061207f565b5b50565b82805482825590600052602060002090810192821561206e579160200282015b8281111561206d578251825591602001919060010190612052565b5b50905061207b919061207f565b5090565b5b80821115612098576000816000905550600101612080565b5090565b6000819050919050565b6120af8161209c565b82525050565b60006020820190506120ca60008301846120a6565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612119816120e4565b811461212457600080fd5b50565b60008135905061213681612110565b92915050565b600060208284031215612152576121516120da565b5b600061216084828501612127565b91505092915050565b60008115159050919050565b61217e81612169565b82525050565b60006020820190506121996000830184612175565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121d95780820151818401526020810190506121be565b838111156121e8576000848401525b50505050565b6000601f19601f8301169050919050565b600061220a8261219f565b61221481856121aa565b93506122248185602086016121bb565b61222d816121ee565b840191505092915050565b6000602082019050818103600083015261225281846121ff565b905092915050565b6122638161209c565b811461226e57600080fd5b50565b6000813590506122808161225a565b92915050565b60006020828403121561229c5761229b6120da565b5b60006122aa84828501612271565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122de826122b3565b9050919050565b6122ee816122d3565b82525050565b600060208201905061230960008301846122e5565b92915050565b612318816122d3565b811461232357600080fd5b50565b6000813590506123358161230f565b92915050565b60008060408385031215612352576123516120da565b5b600061236085828601612326565b925050602061237185828601612271565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123b8826121ee565b810181811067ffffffffffffffff821117156123d7576123d6612380565b5b80604052505050565b60006123ea6120d0565b90506123f682826123af565b919050565b600067ffffffffffffffff82111561241657612415612380565b5b602082029050602081019050919050565b600080fd5b600061243f61243a846123fb565b6123e0565b9050808382526020820190506020840283018581111561246257612461612427565b5b835b8181101561248b57806124778882612271565b845260208401935050602081019050612464565b5050509392505050565b600082601f8301126124aa576124a961237b565b5b81356124ba84826020860161242c565b91505092915050565b600080604083850312156124da576124d96120da565b5b60006124e885828601612271565b925050602083013567ffffffffffffffff811115612509576125086120df565b5b61251585828601612495565b9150509250929050565b600080600060608486031215612538576125376120da565b5b600061254686828701612326565b935050602061255786828701612326565b925050604061256886828701612271565b9150509250925092565b600060208284031215612588576125876120da565b5b600061259684828501612326565b91505092915050565b6125a881612169565b81146125b357600080fd5b50565b6000813590506125c58161259f565b92915050565b600080604083850312156125e2576125e16120da565b5b60006125f085828601612326565b9250506020612601858286016125b6565b9150509250929050565b600080fd5b600067ffffffffffffffff82111561262b5761262a612380565b5b612634826121ee565b9050602081019050919050565b82818337600083830152505050565b600061266361265e84612610565b6123e0565b90508281526020810184848401111561267f5761267e61260b565b5b61268a848285612641565b509392505050565b600082601f8301126126a7576126a661237b565b5b81356126b7848260208601612650565b91505092915050565b600080600080608085870312156126da576126d96120da565b5b60006126e887828801612326565b94505060206126f987828801612326565b935050604061270a87828801612271565b925050606085013567ffffffffffffffff81111561272b5761272a6120df565b5b61273787828801612692565b91505092959194509250565b6000806040838503121561275a576127596120da565b5b600061276885828601612326565b925050602061277985828601612326565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127ca57607f821691505b6020821081036127dd576127dc612783565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061283f6021836121aa565b915061284a826127e3565b604082019050919050565b6000602082019050818103600083015261286e81612832565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006128d1603e836121aa565b91506128dc82612875565b604082019050919050565b60006020820190508181036000830152612900816128c4565b9050919050565b7f4e6f20617661696c61626c65205552497320746f206265206d696e7465640000600082015250565b600061293d601e836121aa565b915061294882612907565b602082019050919050565b6000602082019050818103600083015261296c81612930565b9050919050565b7f4e6f20617661696c61626c652072616e646f6d20776f72647300000000000000600082015250565b60006129a96019836121aa565b91506129b482612973565b602082019050919050565b600060208201905081810360008301526129d88161299c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a198261209c565b9150612a248361209c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a5957612a586129df565b5b828201905092915050565b6000604082019050612a7960008301856122e5565b612a8660208301846122e5565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612ae9602e836121aa565b9150612af482612a8d565b604082019050919050565b60006020820190508181036000830152612b1881612adc565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b556018836121aa565b9150612b6082612b1f565b602082019050919050565b60006020820190508181036000830152612b8481612b48565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612be76029836121aa565b9150612bf282612b8b565b604082019050919050565b60006020820190508181036000830152612c1681612bda565b9050919050565b600081905092915050565b6000612c338261219f565b612c3d8185612c1d565b9350612c4d8185602086016121bb565b80840191505092915050565b6000612c658285612c28565b9150612c718284612c28565b91508190509392505050565b7f52616e646f6d7320616c726561647920696e697469616c697a65640000000000600082015250565b6000612cb3601b836121aa565b9150612cbe82612c7d565b602082019050919050565b60006020820190508181036000830152612ce281612ca6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d456026836121aa565b9150612d5082612ce9565b604082019050919050565b60006020820190508181036000830152612d7481612d38565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612de48261209c565b9150612def8361209c565b925082612dff57612dfe612daa565b5b828206905092915050565b6000612e158261209c565b9150612e208361209c565b925082821015612e3357612e326129df565b5b828203905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ea07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e63565b612eaa8683612e63565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612ee7612ee2612edd8461209c565b612ec2565b61209c565b9050919050565b6000819050919050565b612f0183612ecc565b612f15612f0d82612eee565b848454612e70565b825550505050565b600090565b612f2a612f1d565b612f35818484612ef8565b505050565b5b81811015612f5957612f4e600082612f22565b600181019050612f3b565b5050565b601f821115612f9e57612f6f81612e3e565b612f7884612e53565b81016020851015612f87578190505b612f9b612f9385612e53565b830182612f3a565b50505b505050565b600082821c905092915050565b6000612fc160001984600802612fa3565b1980831691505092915050565b6000612fda8383612fb0565b9150826002028217905092915050565b612ff38261219f565b67ffffffffffffffff81111561300c5761300b612380565b5b61301682546127b2565b613021828285612f5d565b600060209050601f8311600181146130545760008415613042578287015190505b61304c8582612fce565b8655506130b4565b601f19841661306286612e3e565b60005b8281101561308a57848901518255600182019150602085019450602081019050613065565b868310156130a757848901516130a3601f891682612fb0565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613147602e836121aa565b9150613152826130eb565b604082019050919050565b600060208201905081810360008301526131768161313a565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131d96025836121aa565b91506131e48261317d565b604082019050919050565b60006020820190508181036000830152613208816131cc565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061326b6024836121aa565b91506132768261320f565b604082019050919050565b6000602082019050818103600083015261329a8161325e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132d76020836121aa565b91506132e2826132a1565b602082019050919050565b60006020820190508181036000830152613306816132ca565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006133436019836121aa565b915061334e8261330d565b602082019050919050565b6000602082019050818103600083015261337281613336565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006133d56032836121aa565b91506133e082613379565b604082019050919050565b60006020820190508181036000830152613404816133c8565b9050919050565b600063ffffffff82169050919050565b60006134268261340b565b91506134318361340b565b92508263ffffffff0382111561344a576134496129df565b5b828201905092915050565b60006134608261340b565b915061346b8361340b565b92508163ffffffff0483118215151615613488576134876129df565b5b828202905092915050565b6000819050919050565b6134a681613493565b82525050565b600067ffffffffffffffff82169050919050565b6134c9816134ac565b82525050565b600061ffff82169050919050565b6134e6816134cf565b82525050565b6134f58161340b565b82525050565b600060a082019050613510600083018861349d565b61351d60208301876134c0565b61352a60408301866134dd565b61353760608301856134ec565b61354460808301846134ec565b9695505050505050565b60008151905061355d8161225a565b92915050565b600060208284031215613579576135786120da565b5b60006135878482850161354e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006135b782613590565b6135c1818561359b565b93506135d18185602086016121bb565b6135da816121ee565b840191505092915050565b60006080820190506135fa60008301876122e5565b61360760208301866122e5565b61361460408301856120a6565b818103606083015261362681846135ac565b905095945050505050565b60008151905061364081612110565b92915050565b60006020828403121561365c5761365b6120da565b5b600061366a84828501613631565b91505092915050565b600061367e8261209c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136b0576136af6129df565b5b600182019050919050565b60006136c68261209c565b91506136d18361209c565b9250826136e1576136e0612daa565b5b828204905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137226020836121aa565b915061372d826136ec565b602082019050919050565b6000602082019050818103600083015261375181613715565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061378e601c836121aa565b915061379982613758565b602082019050919050565b600060208201905081810360008301526137bd81613781565b905091905056fea264697066735822122082de98ad0e2baa5b3901c74ef43a70d58b6febad01b330b643a525cd685947cf64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 285,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 287,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 291,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 295,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 305,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1273,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 154,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2006,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "coordinator",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 2029,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "randomWords",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2031,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "requestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2034,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2037,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "characterUris",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}