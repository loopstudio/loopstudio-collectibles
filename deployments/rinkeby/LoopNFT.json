{
  "address": "0x5477f0Ed8396863BB298Ef277c77F53C6c5bD665",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHask",
          "type": "bytes32"
        },
        {
          "internalType": "string[50]",
          "name": "_characterUris",
          "type": "string[50]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeRandoms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x086e099849132db73f10b4ffc2b8c2c2f2cd96d04d85fef10a4198ccc2dd48f6",
  "receipt": {
    "to": null,
    "from": "0xD890357F631d209FB3eFf09116cE2aaC3A624597",
    "contractAddress": "0x5477f0Ed8396863BB298Ef277c77F53C6c5bD665",
    "transactionIndex": 12,
    "gasUsed": "7911545",
    "logsBloom": "0x
    "blockHash": "0x4838c9057f2d0825203f639b31651e78bd820104bc4b4dc93034180324c7463f",
    "transactionHash": "0x086e099849132db73f10b4ffc2b8c2c2f2cd96d04d85fef10a4198ccc2dd48f6",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 11134198,
        "transactionHash": "0x086e099849132db73f10b4ffc2b8c2c2f2cd96d04d85fef10a4198ccc2dd48f6",
        "address": "0x5477f0Ed8396863BB298Ef277c77F53C6c5bD665",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d890357f631d209fb3eff09116ce2aac3a624597"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x4838c9057f2d0825203f639b31651e78bd820104bc4b4dc93034180324c7463f"
      }
    ],
    "blockNumber": 11134198,
    "cumulativeGasUsed": "11378985",
    "status": 1,
    "byzantium": true
  },
  "args": [
    9245,
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    [
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json",
      "https://ipfs.io/ipfs/QmVrisQ5DV9kD7HH6Ky4PrxJYg7EiaWqxnLUoQ3np6KFUu?filename=loopjrdev.json",
      "https://ipfs.io/ipfs/QmZ8NoCGjuDU5SA4dzGfyFRpnfWQAzGjCKwkuCSBCudgC2?filename=loopssrdev.json",
      "https://ipfs.io/ipfs/Qme61k7jPUsuZoEcihtBB6fMN2FaaEkwr8zpcukfkdn1d7?filename=loopsrdev.json",
      "https://ipfs.io/ipfs/QmPmY4DXRHL4msahmAmSUyY9HeJJR8udv6fv6rv3TmaPao?filename=loopssrpm.json",
      "https://ipfs.io/ipfs/Qmakb3sFwsXk6D15dbLYTpQHbuoT1vdGtYdYc7hKWmsWTT?filename=loopsrpm.json"
    ]
  ],
  "numDeployments": 2,
  "solcInputHash": "4d01e43f83d8b9b25f6e06d651cead88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHask\",\"type\":\"bytes32\"},{\"internalType\":\"string[50]\",\"name\":\"_characterUris\",\"type\":\"string[50]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeRandoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoopNFT.sol\":\"LoopNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LoopNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LoopNFT is VRFConsumerBaseV2, ERC721URIStorage, Ownable {\\n  bool vrfInitialized = false;\\n\\n  // VRF variables\\n  VRFCoordinatorV2Interface COORDINATOR;\\n\\n  uint64 private subscriptionId;\\n  address private immutable vrfCoordinator;\\n  bytes32 private immutable keyHash;\\n  uint32 private constant callbackGasLimit = 20000 * (numWords + 10);\\n  uint16 private constant requestConfirmations = 3;\\n  uint32 private constant numWords = 50;\\n\\n  uint256[] public randomWords;\\n  uint256 public requestId;\\n\\n  // NFT variables\\n  uint256 public tokenCounter = 0;\\n  string[] private characterUris;\\n\\n  constructor(\\n    uint64 _subscriptionId,\\n    address _vrfCoordinator,\\n    bytes32 _keyHask,\\n    string[50] memory _characterUris\\n  ) VRFConsumerBaseV2(_vrfCoordinator) ERC721(\\\"LoopNFT\\\", \\\"LOOPNFT\\\") {\\n    require(_characterUris.length == numWords, \\\"Randoms and URI arrays have different length\\\");\\n\\n    COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    subscriptionId = _subscriptionId;\\n    keyHash = _keyHask;\\n    vrfCoordinator = _vrfCoordinator;\\n\\n    characterUris = _characterUris;\\n  }\\n\\n  function initializeRandoms() external onlyOwner {\\n    require(!vrfInitialized, \\\"Randoms already initialized\\\");\\n\\n    requestRandomWords();\\n    vrfInitialized = true;\\n  }\\n\\n  function requestRandomWords() private {\\n    requestId = COORDINATOR.requestRandomWords(\\n      keyHash,\\n      subscriptionId,\\n      requestConfirmations,\\n      callbackGasLimit,\\n      numWords\\n    );\\n  }\\n\\n  function fulfillRandomWords(\\n    uint256, /* requestId */\\n    uint256[] memory _randomWords\\n  ) internal override {\\n    randomWords = _randomWords;\\n  }\\n\\n  function mint() public returns (uint256) {\\n    require(characterUris.length > 0, \\\"No available URIs to be minted\\\");\\n    require(randomWords.length > 0, \\\"No available random words\\\");\\n\\n    _safeMint(msg.sender, tokenCounter);\\n    _setTokenURI(tokenCounter, getRandomURI());\\n\\n    tokenCounter += 1;\\n\\n    return tokenCounter;\\n  }\\n\\n  function getRandomURI() private returns (string memory) {\\n      uint8 index = uint8((randomWords[0] % characterUris.length));\\n      string memory uriToMint = characterUris[index];\\n\\n      // Reference: https://www.youtube.com/watch?v=szv2zJcy_Xs\\n      string memory lastUri = characterUris[characterUris.length - 1];\\n      characterUris[index] = lastUri;\\n      characterUris.pop();\\n      randomWords.pop();\\n\\n      return uriToMint;\\n  }\\n}\\n\",\"keccak256\":\"0xc0b4fa79b87adc18987f7131cbe47428b0825bf60d61235f770b0b4fc735901d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040526000600760146101000a81548160ff0219169083151502179055506000600b553480156200003157600080fd5b506040516200443038038062004430833981810160405281019062000057919062000777565b6040518060400160405280600781526020017f4c6f6f704e4654000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4c4f4f504e465400000000000000000000000000000000000000000000000000815250848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505081600090816200010a919062000a53565b5080600190816200011c919062000a53565b5050506200013f620001336200025060201b60201c565b6200025860201b60201c565b603263ffffffff166032146200018c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001839062000bc1565b60405180910390fd5b82600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600860146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508160c081815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505080600c906032620002459291906200031e565b505050505062000be3565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280548282559060005260206000209081019282156200036b579160200282015b828111156200036a57825182908162000359919062000a53565b50916020019190600101906200033f565b5b5090506200037a91906200037e565b5090565b5b80821115620003a25760008181620003989190620003a6565b506001016200037f565b5090565b508054620003b49062000842565b6000825580601f10620003c85750620003e9565b601f016020900490600052602060002090810190620003e89190620003ec565b5b50565b5b8082111562000407576000816000905550600101620003ed565b5090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b6200043e816200041f565b81146200044a57600080fd5b50565b6000815190506200045e8162000433565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004918262000464565b9050919050565b620004a38162000484565b8114620004af57600080fd5b50565b600081519050620004c38162000498565b92915050565b6000819050919050565b620004de81620004c9565b8114620004ea57600080fd5b50565b600081519050620004fe81620004d3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620005548262000509565b810181811067ffffffffffffffff821117156200057657620005756200051a565b5b80604052505050565b60006200058b6200040b565b905062000599828262000549565b919050565b600067ffffffffffffffff821115620005bc57620005bb6200051a565b5b602082029050919050565b600080fd5b600080fd5b600067ffffffffffffffff821115620005ef57620005ee6200051a565b5b620005fa8262000509565b9050602081019050919050565b60005b83811015620006275780820151818401526020810190506200060a565b8381111562000637576000848401525b50505050565b6000620006546200064e84620005d1565b6200057f565b905082815260208101848484011115620006735762000672620005cc565b5b6200068084828562000607565b509392505050565b600082601f830112620006a0576200069f62000504565b5b8151620006b28482602086016200063d565b91505092915050565b6000620006d2620006cc846200059e565b6200057f565b90508060208402830185811115620006ef57620006ee620005c7565b5b835b818110156200073d57805167ffffffffffffffff81111562000718576200071762000504565b5b80860162000727898262000688565b85526020850194505050602081019050620006f1565b5050509392505050565b600082601f8301126200075f576200075e62000504565b5b60326200076e848285620006bb565b91505092915050565b6000806000806080858703121562000794576200079362000415565b5b6000620007a4878288016200044d565b9450506020620007b787828801620004b2565b9350506040620007ca87828801620004ed565b925050606085015167ffffffffffffffff811115620007ee57620007ed6200041a565b5b620007fc8782880162000747565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200085b57607f821691505b60208210810362000871576200087062000813565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620008db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200089c565b620008e786836200089c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620009346200092e6200092884620008ff565b62000909565b620008ff565b9050919050565b6000819050919050565b620009508362000913565b620009686200095f826200093b565b848454620008a9565b825550505050565b600090565b6200097f62000970565b6200098c81848462000945565b505050565b5b81811015620009b457620009a860008262000975565b60018101905062000992565b5050565b601f82111562000a0357620009cd8162000877565b620009d8846200088c565b81016020851015620009e8578190505b62000a00620009f7856200088c565b83018262000991565b50505b505050565b600082821c905092915050565b600062000a286000198460080262000a08565b1980831691505092915050565b600062000a43838362000a15565b9150826002028217905092915050565b62000a5e8262000808565b67ffffffffffffffff81111562000a7a5762000a796200051a565b5b62000a86825462000842565b62000a93828285620009b8565b600060209050601f83116001811462000acb576000841562000ab6578287015190505b62000ac2858262000a35565b86555062000b32565b601f19841662000adb8662000877565b60005b8281101562000b055784890151825560018201915060208501945060208101905062000ade565b8683101562000b25578489015162000b21601f89168262000a15565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f52616e646f6d7320616e6420555249206172726179732068617665206469666660008201527f6572656e74206c656e6774680000000000000000000000000000000000000000602082015250565b600062000ba9602c8362000b3a565b915062000bb68262000b4b565b604082019050919050565b6000602082019050818103600083015262000bdc8162000b9a565b9050919050565b60805160a05160c05161381962000c17600039600061199d015260005050600081816107cd015261082101526138196000f3fe608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063beff730f1161007c578063beff730f1461034e578063c87b56dd1461037e578063d082e381146103ae578063e51edc94146103cc578063e985e9c5146103d6578063f2fde38b1461040657610141565b8063715018a6146102d05780638da5cb5b146102da57806395d89b41146102f8578063a22cb46514610316578063b88d4fde1461033257610141565b80631249c58b1161010a5780631249c58b146101fe5780631fe543e31461021c57806323b872dd1461023857806342842e0e146102545780636352211e1461027057806370a08231146102a057610141565b80626d6cae1461014657806301ffc9a71461016457806306fdde0314610194578063081812fc146101b2578063095ea7b3146101e2575b600080fd5b61014e610422565b60405161015b91906120d4565b60405180910390f35b61017e6004803603810190610179919061215b565b610428565b60405161018b91906121a3565b60405180910390f35b61019c61050a565b6040516101a99190612257565b60405180910390f35b6101cc60048036038101906101c791906122a5565b61059c565b6040516101d99190612313565b60405180910390f35b6101fc60048036038101906101f7919061235a565b6105e2565b005b6102066106f9565b60405161021391906120d4565b60405180910390f35b610236600480360381019061023191906124e2565b6107cb565b005b610252600480360381019061024d919061253e565b61088b565b005b61026e6004803603810190610269919061253e565b6108eb565b005b61028a600480360381019061028591906122a5565b61090b565b6040516102979190612313565b60405180910390f35b6102ba60048036038101906102b59190612591565b6109bc565b6040516102c791906120d4565b60405180910390f35b6102d8610a73565b005b6102e2610a87565b6040516102ef9190612313565b60405180910390f35b610300610ab1565b60405161030d9190612257565b60405180910390f35b610330600480360381019061032b91906125ea565b610b43565b005b61034c600480360381019061034791906126df565b610b59565b005b610368600480360381019061036391906122a5565b610bbb565b60405161037591906120d4565b60405180910390f35b610398600480360381019061039391906122a5565b610bdf565b6040516103a59190612257565b60405180910390f35b6103b6610cf1565b6040516103c391906120d4565b60405180910390f35b6103d4610cf7565b005b6103f060048036038101906103eb9190612762565b610d74565b6040516103fd91906121a3565b60405180910390f35b610420600480360381019061041b9190612591565b610e08565b005b600a5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610503575061050282610e8b565b5b9050919050565b606060008054610519906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906127d1565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ef5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ed8261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490612874565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067c610f40565b73ffffffffffffffffffffffffffffffffffffffff1614806106ab57506106aa816106a5610f40565b610d74565b5b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190612906565b60405180910390fd5b6106f48383610f48565b505050565b600080600c8054905011610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612972565b60405180910390fd5b60006009805490501161078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906129de565b60405180910390fd5b61079633600b54611001565b6107a9600b546107a461101f565b61124f565b6001600b60008282546107bc9190612a2d565b92505081905550600b54905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610874929190612a83565b60405180910390fd5b61088782826112bc565b5050565b61089c610896610f40565b826112d7565b6108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612b1e565b60405180910390fd5b6108e683838361136c565b505050565b61090683838360405180602001604052806000815250610b59565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90612b8a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612c1c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a7b6115d2565b610a856000611650565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ac0906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec906127d1565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b5050505050905090565b610b55610b4e610f40565b8383611716565b5050565b610b6a610b64610f40565b836112d7565b610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090612b1e565b60405180910390fd5b610bb584848484611882565b50505050565b60098181548110610bcb57600080fd5b906000526020600020016000915090505481565b6060610bea82610ef5565b6000600660008481526020019081526020016000208054610c0a906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c36906127d1565b8015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b505050505090506000610c946118de565b90506000815103610ca9578192505050610cec565b600082511115610cde578082604051602001610cc6929190612c78565b60405160208183030381529060405292505050610cec565b610ce7846118f5565b925050505b919050565b600b5481565b610cff6115d2565b600760149054906101000a900460ff1615610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612ce8565b60405180910390fd5b610d5761195d565b6001600760146101000a81548160ff021916908315150217905550565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e106115d2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7690612d7a565b60405180910390fd5b610e8881611650565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610efe81611a5d565b610f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3490612b8a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fbb8361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61101b828260405180602001604052806000815250611ac9565b5050565b60606000600c80549050600960008154811061103e5761103d612d9a565b5b90600052602060002001546110539190612df8565b90506000600c8260ff168154811061106e5761106d612d9a565b5b906000526020600020018054611083906127d1565b80601f01602080910402602001604051908101604052809291908181526020018280546110af906127d1565b80156110fc5780601f106110d1576101008083540402835291602001916110fc565b820191906000526020600020905b8154815290600101906020018083116110df57829003601f168201915b505050505090506000600c6001600c805490506111199190612e29565b8154811061112a57611129612d9a565b5b90600052602060002001805461113f906127d1565b80601f016020809104026020016040519081016040528092919081815260200182805461116b906127d1565b80156111b85780601f1061118d576101008083540402835291602001916111b8565b820191906000526020600020905b81548152906001019060200180831161119b57829003601f168201915b5050505050905080600c8460ff16815481106111d7576111d6612d9a565b5b9060005260206000200190816111ed9190613009565b50600c805480611200576111ff6130db565b5b60019003818190600052602060002001600061121c9190612011565b905560098054806112305761122f6130db565b5b6001900381819060005260206000200160009055905581935050505090565b61125882611a5d565b611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e9061317c565b60405180910390fd5b806006600084815260200190815260200160002090816112b79190613009565b505050565b80600990805190602001906112d2929190612051565b505050565b6000806112e38361090b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061132557506113248185610d74565b5b8061136357508373ffffffffffffffffffffffffffffffffffffffff1661134b8461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661138c8261090b565b73ffffffffffffffffffffffffffffffffffffffff16146113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d99061320e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611448906132a0565b60405180910390fd5b61145c838383611b24565b611467600082610f48565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b79190612e29565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150e9190612a2d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115cd838383611b29565b505050565b6115da610f40565b73ffffffffffffffffffffffffffffffffffffffff166115f8610a87565b73ffffffffffffffffffffffffffffffffffffffff161461164e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116459061330c565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b90613378565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161187591906121a3565b60405180910390a3505050565b61188d84848461136c565b61189984848484611b2e565b6118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf9061340a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061190082610ef5565b600061190a6118de565b9050600081511161192a5760405180602001604052806000815250611955565b8061193484611cb5565b604051602001611945929190612c78565b6040516020818303038152906040525b915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600860149054906101000a900467ffffffffffffffff166003600a60326119e3919061343a565b614e206119f09190613474565b60326040518663ffffffff1660e01b8152600401611a1295949392919061351a565b6020604051808303816000875af1158015611a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a559190613582565b600a81905550565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611ad38383611e15565b611ae06000848484611b2e565b611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b169061340a565b60405180910390fd5b505050565b505050565b505050565b6000611b4f8473ffffffffffffffffffffffffffffffffffffffff16611fee565b15611ca8578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b78610f40565b8786866040518563ffffffff1660e01b8152600401611b9a9493929190613604565b6020604051808303816000875af1925050508015611bd657506040513d601f19601f82011682018060405250810190611bd39190613665565b60015b611c58573d8060008114611c06576040519150601f19603f3d011682016040523d82523d6000602084013e611c0b565b606091505b506000815103611c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c479061340a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611cad565b600190505b949350505050565b606060008203611cfc576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e10565b600082905060005b60008214611d2e578080611d1790613692565b915050600a82611d2791906136da565b9150611d04565b60008167ffffffffffffffff811115611d4a57611d4961239f565b5b6040519080825280601f01601f191660200182016040528015611d7c5781602001600182028036833780820191505090505b5090505b60008514611e0957600182611d959190612e29565b9150600a85611da49190612df8565b6030611db09190612a2d565b60f81b818381518110611dc657611dc5612d9a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e0291906136da565b9450611d80565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b90613757565b60405180910390fd5b611e8d81611a5d565b15611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec4906137c3565b60405180910390fd5b611ed960008383611b24565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f299190612a2d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fea60008383611b29565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50805461201d906127d1565b6000825580601f1061202f575061204e565b601f01602090049060005260206000209081019061204d919061209e565b5b50565b82805482825590600052602060002090810192821561208d579160200282015b8281111561208c578251825591602001919060010190612071565b5b50905061209a919061209e565b5090565b5b808211156120b757600081600090555060010161209f565b5090565b6000819050919050565b6120ce816120bb565b82525050565b60006020820190506120e960008301846120c5565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61213881612103565b811461214357600080fd5b50565b6000813590506121558161212f565b92915050565b600060208284031215612171576121706120f9565b5b600061217f84828501612146565b91505092915050565b60008115159050919050565b61219d81612188565b82525050565b60006020820190506121b86000830184612194565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121f85780820151818401526020810190506121dd565b83811115612207576000848401525b50505050565b6000601f19601f8301169050919050565b6000612229826121be565b61223381856121c9565b93506122438185602086016121da565b61224c8161220d565b840191505092915050565b60006020820190508181036000830152612271818461221e565b905092915050565b612282816120bb565b811461228d57600080fd5b50565b60008135905061229f81612279565b92915050565b6000602082840312156122bb576122ba6120f9565b5b60006122c984828501612290565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122fd826122d2565b9050919050565b61230d816122f2565b82525050565b60006020820190506123286000830184612304565b92915050565b612337816122f2565b811461234257600080fd5b50565b6000813590506123548161232e565b92915050565b60008060408385031215612371576123706120f9565b5b600061237f85828601612345565b925050602061239085828601612290565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123d78261220d565b810181811067ffffffffffffffff821117156123f6576123f561239f565b5b80604052505050565b60006124096120ef565b905061241582826123ce565b919050565b600067ffffffffffffffff8211156124355761243461239f565b5b602082029050602081019050919050565b600080fd5b600061245e6124598461241a565b6123ff565b9050808382526020820190506020840283018581111561248157612480612446565b5b835b818110156124aa57806124968882612290565b845260208401935050602081019050612483565b5050509392505050565b600082601f8301126124c9576124c861239a565b5b81356124d984826020860161244b565b91505092915050565b600080604083850312156124f9576124f86120f9565b5b600061250785828601612290565b925050602083013567ffffffffffffffff811115612528576125276120fe565b5b612534858286016124b4565b9150509250929050565b600080600060608486031215612557576125566120f9565b5b600061256586828701612345565b935050602061257686828701612345565b925050604061258786828701612290565b9150509250925092565b6000602082840312156125a7576125a66120f9565b5b60006125b584828501612345565b91505092915050565b6125c781612188565b81146125d257600080fd5b50565b6000813590506125e4816125be565b92915050565b60008060408385031215612601576126006120f9565b5b600061260f85828601612345565b9250506020612620858286016125d5565b9150509250929050565b600080fd5b600067ffffffffffffffff82111561264a5761264961239f565b5b6126538261220d565b9050602081019050919050565b82818337600083830152505050565b600061268261267d8461262f565b6123ff565b90508281526020810184848401111561269e5761269d61262a565b5b6126a9848285612660565b509392505050565b600082601f8301126126c6576126c561239a565b5b81356126d684826020860161266f565b91505092915050565b600080600080608085870312156126f9576126f86120f9565b5b600061270787828801612345565b945050602061271887828801612345565b935050604061272987828801612290565b925050606085013567ffffffffffffffff81111561274a576127496120fe565b5b612756878288016126b1565b91505092959194509250565b60008060408385031215612779576127786120f9565b5b600061278785828601612345565b925050602061279885828601612345565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127e957607f821691505b6020821081036127fc576127fb6127a2565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061285e6021836121c9565b915061286982612802565b604082019050919050565b6000602082019050818103600083015261288d81612851565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006128f0603e836121c9565b91506128fb82612894565b604082019050919050565b6000602082019050818103600083015261291f816128e3565b9050919050565b7f4e6f20617661696c61626c65205552497320746f206265206d696e7465640000600082015250565b600061295c601e836121c9565b915061296782612926565b602082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f4e6f20617661696c61626c652072616e646f6d20776f72647300000000000000600082015250565b60006129c86019836121c9565b91506129d382612992565b602082019050919050565b600060208201905081810360008301526129f7816129bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a38826120bb565b9150612a43836120bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a7857612a776129fe565b5b828201905092915050565b6000604082019050612a986000830185612304565b612aa56020830184612304565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612b08602e836121c9565b9150612b1382612aac565b604082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b746018836121c9565b9150612b7f82612b3e565b602082019050919050565b60006020820190508181036000830152612ba381612b67565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c066029836121c9565b9150612c1182612baa565b604082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b600081905092915050565b6000612c52826121be565b612c5c8185612c3c565b9350612c6c8185602086016121da565b80840191505092915050565b6000612c848285612c47565b9150612c908284612c47565b91508190509392505050565b7f52616e646f6d7320616c726561647920696e697469616c697a65640000000000600082015250565b6000612cd2601b836121c9565b9150612cdd82612c9c565b602082019050919050565b60006020820190508181036000830152612d0181612cc5565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d646026836121c9565b9150612d6f82612d08565b604082019050919050565b60006020820190508181036000830152612d9381612d57565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e03826120bb565b9150612e0e836120bb565b925082612e1e57612e1d612dc9565b5b828206905092915050565b6000612e34826120bb565b9150612e3f836120bb565b925082821015612e5257612e516129fe565b5b828203905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ebf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e82565b612ec98683612e82565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612f06612f01612efc846120bb565b612ee1565b6120bb565b9050919050565b6000819050919050565b612f2083612eeb565b612f34612f2c82612f0d565b848454612e8f565b825550505050565b600090565b612f49612f3c565b612f54818484612f17565b505050565b5b81811015612f7857612f6d600082612f41565b600181019050612f5a565b5050565b601f821115612fbd57612f8e81612e5d565b612f9784612e72565b81016020851015612fa6578190505b612fba612fb285612e72565b830182612f59565b50505b505050565b600082821c905092915050565b6000612fe060001984600802612fc2565b1980831691505092915050565b6000612ff98383612fcf565b9150826002028217905092915050565b613012826121be565b67ffffffffffffffff81111561302b5761302a61239f565b5b61303582546127d1565b613040828285612f7c565b600060209050601f8311600181146130735760008415613061578287015190505b61306b8582612fed565b8655506130d3565b601f19841661308186612e5d565b60005b828110156130a957848901518255600182019150602085019450602081019050613084565b868310156130c657848901516130c2601f891682612fcf565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613166602e836121c9565b91506131718261310a565b604082019050919050565b6000602082019050818103600083015261319581613159565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131f86025836121c9565b91506132038261319c565b604082019050919050565b60006020820190508181036000830152613227816131eb565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061328a6024836121c9565b91506132958261322e565b604082019050919050565b600060208201905081810360008301526132b98161327d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132f66020836121c9565b9150613301826132c0565b602082019050919050565b60006020820190508181036000830152613325816132e9565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006133626019836121c9565b915061336d8261332c565b602082019050919050565b6000602082019050818103600083015261339181613355565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006133f46032836121c9565b91506133ff82613398565b604082019050919050565b60006020820190508181036000830152613423816133e7565b9050919050565b600063ffffffff82169050919050565b60006134458261342a565b91506134508361342a565b92508263ffffffff03821115613469576134686129fe565b5b828201905092915050565b600061347f8261342a565b915061348a8361342a565b92508163ffffffff04831182151516156134a7576134a66129fe565b5b828202905092915050565b6000819050919050565b6134c5816134b2565b82525050565b600067ffffffffffffffff82169050919050565b6134e8816134cb565b82525050565b600061ffff82169050919050565b613505816134ee565b82525050565b6135148161342a565b82525050565b600060a08201905061352f60008301886134bc565b61353c60208301876134df565b61354960408301866134fc565b613556606083018561350b565b613563608083018461350b565b9695505050505050565b60008151905061357c81612279565b92915050565b600060208284031215613598576135976120f9565b5b60006135a68482850161356d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006135d6826135af565b6135e081856135ba565b93506135f08185602086016121da565b6135f98161220d565b840191505092915050565b60006080820190506136196000830187612304565b6136266020830186612304565b61363360408301856120c5565b818103606083015261364581846135cb565b905095945050505050565b60008151905061365f8161212f565b92915050565b60006020828403121561367b5761367a6120f9565b5b600061368984828501613650565b91505092915050565b600061369d826120bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136cf576136ce6129fe565b5b600182019050919050565b60006136e5826120bb565b91506136f0836120bb565b925082613700576136ff612dc9565b5b828204905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137416020836121c9565b915061374c8261370b565b602082019050919050565b6000602082019050818103600083015261377081613734565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006137ad601c836121c9565b91506137b882613777565b602082019050919050565b600060208201905081810360008301526137dc816137a0565b905091905056fea26469706673582212203d119499842aaec039cdad1d366155a3a98890a9e4d81c60e6ee9f42236c812264736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101415760003560e01c8063715018a6116100b8578063beff730f1161007c578063beff730f1461034e578063c87b56dd1461037e578063d082e381146103ae578063e51edc94146103cc578063e985e9c5146103d6578063f2fde38b1461040657610141565b8063715018a6146102d05780638da5cb5b146102da57806395d89b41146102f8578063a22cb46514610316578063b88d4fde1461033257610141565b80631249c58b1161010a5780631249c58b146101fe5780631fe543e31461021c57806323b872dd1461023857806342842e0e146102545780636352211e1461027057806370a08231146102a057610141565b80626d6cae1461014657806301ffc9a71461016457806306fdde0314610194578063081812fc146101b2578063095ea7b3146101e2575b600080fd5b61014e610422565b60405161015b91906120d4565b60405180910390f35b61017e6004803603810190610179919061215b565b610428565b60405161018b91906121a3565b60405180910390f35b61019c61050a565b6040516101a99190612257565b60405180910390f35b6101cc60048036038101906101c791906122a5565b61059c565b6040516101d99190612313565b60405180910390f35b6101fc60048036038101906101f7919061235a565b6105e2565b005b6102066106f9565b60405161021391906120d4565b60405180910390f35b610236600480360381019061023191906124e2565b6107cb565b005b610252600480360381019061024d919061253e565b61088b565b005b61026e6004803603810190610269919061253e565b6108eb565b005b61028a600480360381019061028591906122a5565b61090b565b6040516102979190612313565b60405180910390f35b6102ba60048036038101906102b59190612591565b6109bc565b6040516102c791906120d4565b60405180910390f35b6102d8610a73565b005b6102e2610a87565b6040516102ef9190612313565b60405180910390f35b610300610ab1565b60405161030d9190612257565b60405180910390f35b610330600480360381019061032b91906125ea565b610b43565b005b61034c600480360381019061034791906126df565b610b59565b005b610368600480360381019061036391906122a5565b610bbb565b60405161037591906120d4565b60405180910390f35b610398600480360381019061039391906122a5565b610bdf565b6040516103a59190612257565b60405180910390f35b6103b6610cf1565b6040516103c391906120d4565b60405180910390f35b6103d4610cf7565b005b6103f060048036038101906103eb9190612762565b610d74565b6040516103fd91906121a3565b60405180910390f35b610420600480360381019061041b9190612591565b610e08565b005b600a5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104f357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610503575061050282610e8b565b5b9050919050565b606060008054610519906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610545906127d1565b80156105925780601f1061056757610100808354040283529160200191610592565b820191906000526020600020905b81548152906001019060200180831161057557829003601f168201915b5050505050905090565b60006105a782610ef5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105ed8261090b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065490612874565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661067c610f40565b73ffffffffffffffffffffffffffffffffffffffff1614806106ab57506106aa816106a5610f40565b610d74565b5b6106ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e190612906565b60405180910390fd5b6106f48383610f48565b505050565b600080600c8054905011610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612972565b60405180910390fd5b60006009805490501161078a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610781906129de565b60405180910390fd5b61079633600b54611001565b6107a9600b546107a461101f565b61124f565b6001600b60008282546107bc9190612a2d565b92505081905550600b54905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610874929190612a83565b60405180910390fd5b61088782826112bc565b5050565b61089c610896610f40565b826112d7565b6108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290612b1e565b60405180910390fd5b6108e683838361136c565b505050565b61090683838360405180602001604052806000815250610b59565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90612b8a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2390612c1c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a7b6115d2565b610a856000611650565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ac0906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610aec906127d1565b8015610b395780601f10610b0e57610100808354040283529160200191610b39565b820191906000526020600020905b815481529060010190602001808311610b1c57829003601f168201915b5050505050905090565b610b55610b4e610f40565b8383611716565b5050565b610b6a610b64610f40565b836112d7565b610ba9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba090612b1e565b60405180910390fd5b610bb584848484611882565b50505050565b60098181548110610bcb57600080fd5b906000526020600020016000915090505481565b6060610bea82610ef5565b6000600660008481526020019081526020016000208054610c0a906127d1565b80601f0160208091040260200160405190810160405280929190818152602001828054610c36906127d1565b8015610c835780601f10610c5857610100808354040283529160200191610c83565b820191906000526020600020905b815481529060010190602001808311610c6657829003601f168201915b505050505090506000610c946118de565b90506000815103610ca9578192505050610cec565b600082511115610cde578082604051602001610cc6929190612c78565b60405160208183030381529060405292505050610cec565b610ce7846118f5565b925050505b919050565b600b5481565b610cff6115d2565b600760149054906101000a900460ff1615610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4690612ce8565b60405180910390fd5b610d5761195d565b6001600760146101000a81548160ff021916908315150217905550565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e106115d2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7690612d7a565b60405180910390fd5b610e8881611650565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610efe81611a5d565b610f3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3490612b8a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fbb8361090b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61101b828260405180602001604052806000815250611ac9565b5050565b60606000600c80549050600960008154811061103e5761103d612d9a565b5b90600052602060002001546110539190612df8565b90506000600c8260ff168154811061106e5761106d612d9a565b5b906000526020600020018054611083906127d1565b80601f01602080910402602001604051908101604052809291908181526020018280546110af906127d1565b80156110fc5780601f106110d1576101008083540402835291602001916110fc565b820191906000526020600020905b8154815290600101906020018083116110df57829003601f168201915b505050505090506000600c6001600c805490506111199190612e29565b8154811061112a57611129612d9a565b5b90600052602060002001805461113f906127d1565b80601f016020809104026020016040519081016040528092919081815260200182805461116b906127d1565b80156111b85780601f1061118d576101008083540402835291602001916111b8565b820191906000526020600020905b81548152906001019060200180831161119b57829003601f168201915b5050505050905080600c8460ff16815481106111d7576111d6612d9a565b5b9060005260206000200190816111ed9190613009565b50600c805480611200576111ff6130db565b5b60019003818190600052602060002001600061121c9190612011565b905560098054806112305761122f6130db565b5b6001900381819060005260206000200160009055905581935050505090565b61125882611a5d565b611297576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128e9061317c565b60405180910390fd5b806006600084815260200190815260200160002090816112b79190613009565b505050565b80600990805190602001906112d2929190612051565b505050565b6000806112e38361090b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061132557506113248185610d74565b5b8061136357508373ffffffffffffffffffffffffffffffffffffffff1661134b8461059c565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661138c8261090b565b73ffffffffffffffffffffffffffffffffffffffff16146113e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d99061320e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611451576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611448906132a0565b60405180910390fd5b61145c838383611b24565b611467600082610f48565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114b79190612e29565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461150e9190612a2d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46115cd838383611b29565b505050565b6115da610f40565b73ffffffffffffffffffffffffffffffffffffffff166115f8610a87565b73ffffffffffffffffffffffffffffffffffffffff161461164e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116459061330c565b60405180910390fd5b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177b90613378565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161187591906121a3565b60405180910390a3505050565b61188d84848461136c565b61189984848484611b2e565b6118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf9061340a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061190082610ef5565b600061190a6118de565b9050600081511161192a5760405180602001604052806000815250611955565b8061193484611cb5565b604051602001611945929190612c78565b6040516020818303038152906040525b915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f0000000000000000000000000000000000000000000000000000000000000000600860149054906101000a900467ffffffffffffffff166003600a60326119e3919061343a565b614e206119f09190613474565b60326040518663ffffffff1660e01b8152600401611a1295949392919061351a565b6020604051808303816000875af1158015611a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a559190613582565b600a81905550565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611ad38383611e15565b611ae06000848484611b2e565b611b1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b169061340a565b60405180910390fd5b505050565b505050565b505050565b6000611b4f8473ffffffffffffffffffffffffffffffffffffffff16611fee565b15611ca8578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b78610f40565b8786866040518563ffffffff1660e01b8152600401611b9a9493929190613604565b6020604051808303816000875af1925050508015611bd657506040513d601f19601f82011682018060405250810190611bd39190613665565b60015b611c58573d8060008114611c06576040519150601f19603f3d011682016040523d82523d6000602084013e611c0b565b606091505b506000815103611c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c479061340a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611cad565b600190505b949350505050565b606060008203611cfc576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611e10565b600082905060005b60008214611d2e578080611d1790613692565b915050600a82611d2791906136da565b9150611d04565b60008167ffffffffffffffff811115611d4a57611d4961239f565b5b6040519080825280601f01601f191660200182016040528015611d7c5781602001600182028036833780820191505090505b5090505b60008514611e0957600182611d959190612e29565b9150600a85611da49190612df8565b6030611db09190612a2d565b60f81b818381518110611dc657611dc5612d9a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611e0291906136da565b9450611d80565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b90613757565b60405180910390fd5b611e8d81611a5d565b15611ecd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec4906137c3565b60405180910390fd5b611ed960008383611b24565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f299190612a2d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fea60008383611b29565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50805461201d906127d1565b6000825580601f1061202f575061204e565b601f01602090049060005260206000209081019061204d919061209e565b5b50565b82805482825590600052602060002090810192821561208d579160200282015b8281111561208c578251825591602001919060010190612071565b5b50905061209a919061209e565b5090565b5b808211156120b757600081600090555060010161209f565b5090565b6000819050919050565b6120ce816120bb565b82525050565b60006020820190506120e960008301846120c5565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61213881612103565b811461214357600080fd5b50565b6000813590506121558161212f565b92915050565b600060208284031215612171576121706120f9565b5b600061217f84828501612146565b91505092915050565b60008115159050919050565b61219d81612188565b82525050565b60006020820190506121b86000830184612194565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121f85780820151818401526020810190506121dd565b83811115612207576000848401525b50505050565b6000601f19601f8301169050919050565b6000612229826121be565b61223381856121c9565b93506122438185602086016121da565b61224c8161220d565b840191505092915050565b60006020820190508181036000830152612271818461221e565b905092915050565b612282816120bb565b811461228d57600080fd5b50565b60008135905061229f81612279565b92915050565b6000602082840312156122bb576122ba6120f9565b5b60006122c984828501612290565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122fd826122d2565b9050919050565b61230d816122f2565b82525050565b60006020820190506123286000830184612304565b92915050565b612337816122f2565b811461234257600080fd5b50565b6000813590506123548161232e565b92915050565b60008060408385031215612371576123706120f9565b5b600061237f85828601612345565b925050602061239085828601612290565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123d78261220d565b810181811067ffffffffffffffff821117156123f6576123f561239f565b5b80604052505050565b60006124096120ef565b905061241582826123ce565b919050565b600067ffffffffffffffff8211156124355761243461239f565b5b602082029050602081019050919050565b600080fd5b600061245e6124598461241a565b6123ff565b9050808382526020820190506020840283018581111561248157612480612446565b5b835b818110156124aa57806124968882612290565b845260208401935050602081019050612483565b5050509392505050565b600082601f8301126124c9576124c861239a565b5b81356124d984826020860161244b565b91505092915050565b600080604083850312156124f9576124f86120f9565b5b600061250785828601612290565b925050602083013567ffffffffffffffff811115612528576125276120fe565b5b612534858286016124b4565b9150509250929050565b600080600060608486031215612557576125566120f9565b5b600061256586828701612345565b935050602061257686828701612345565b925050604061258786828701612290565b9150509250925092565b6000602082840312156125a7576125a66120f9565b5b60006125b584828501612345565b91505092915050565b6125c781612188565b81146125d257600080fd5b50565b6000813590506125e4816125be565b92915050565b60008060408385031215612601576126006120f9565b5b600061260f85828601612345565b9250506020612620858286016125d5565b9150509250929050565b600080fd5b600067ffffffffffffffff82111561264a5761264961239f565b5b6126538261220d565b9050602081019050919050565b82818337600083830152505050565b600061268261267d8461262f565b6123ff565b90508281526020810184848401111561269e5761269d61262a565b5b6126a9848285612660565b509392505050565b600082601f8301126126c6576126c561239a565b5b81356126d684826020860161266f565b91505092915050565b600080600080608085870312156126f9576126f86120f9565b5b600061270787828801612345565b945050602061271887828801612345565b935050604061272987828801612290565b925050606085013567ffffffffffffffff81111561274a576127496120fe565b5b612756878288016126b1565b91505092959194509250565b60008060408385031215612779576127786120f9565b5b600061278785828601612345565b925050602061279885828601612345565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127e957607f821691505b6020821081036127fc576127fb6127a2565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061285e6021836121c9565b915061286982612802565b604082019050919050565b6000602082019050818103600083015261288d81612851565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006128f0603e836121c9565b91506128fb82612894565b604082019050919050565b6000602082019050818103600083015261291f816128e3565b9050919050565b7f4e6f20617661696c61626c65205552497320746f206265206d696e7465640000600082015250565b600061295c601e836121c9565b915061296782612926565b602082019050919050565b6000602082019050818103600083015261298b8161294f565b9050919050565b7f4e6f20617661696c61626c652072616e646f6d20776f72647300000000000000600082015250565b60006129c86019836121c9565b91506129d382612992565b602082019050919050565b600060208201905081810360008301526129f7816129bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a38826120bb565b9150612a43836120bb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a7857612a776129fe565b5b828201905092915050565b6000604082019050612a986000830185612304565b612aa56020830184612304565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000612b08602e836121c9565b9150612b1382612aac565b604082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612b746018836121c9565b9150612b7f82612b3e565b602082019050919050565b60006020820190508181036000830152612ba381612b67565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612c066029836121c9565b9150612c1182612baa565b604082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b600081905092915050565b6000612c52826121be565b612c5c8185612c3c565b9350612c6c8185602086016121da565b80840191505092915050565b6000612c848285612c47565b9150612c908284612c47565b91508190509392505050565b7f52616e646f6d7320616c726561647920696e697469616c697a65640000000000600082015250565b6000612cd2601b836121c9565b9150612cdd82612c9c565b602082019050919050565b60006020820190508181036000830152612d0181612cc5565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d646026836121c9565b9150612d6f82612d08565b604082019050919050565b60006020820190508181036000830152612d9381612d57565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612e03826120bb565b9150612e0e836120bb565b925082612e1e57612e1d612dc9565b5b828206905092915050565b6000612e34826120bb565b9150612e3f836120bb565b925082821015612e5257612e516129fe565b5b828203905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ebf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e82565b612ec98683612e82565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612f06612f01612efc846120bb565b612ee1565b6120bb565b9050919050565b6000819050919050565b612f2083612eeb565b612f34612f2c82612f0d565b848454612e8f565b825550505050565b600090565b612f49612f3c565b612f54818484612f17565b505050565b5b81811015612f7857612f6d600082612f41565b600181019050612f5a565b5050565b601f821115612fbd57612f8e81612e5d565b612f9784612e72565b81016020851015612fa6578190505b612fba612fb285612e72565b830182612f59565b50505b505050565b600082821c905092915050565b6000612fe060001984600802612fc2565b1980831691505092915050565b6000612ff98383612fcf565b9150826002028217905092915050565b613012826121be565b67ffffffffffffffff81111561302b5761302a61239f565b5b61303582546127d1565b613040828285612f7c565b600060209050601f8311600181146130735760008415613061578287015190505b61306b8582612fed565b8655506130d3565b601f19841661308186612e5d565b60005b828110156130a957848901518255600182019150602085019450602081019050613084565b868310156130c657848901516130c2601f891682612fcf565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613166602e836121c9565b91506131718261310a565b604082019050919050565b6000602082019050818103600083015261319581613159565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131f86025836121c9565b91506132038261319c565b604082019050919050565b60006020820190508181036000830152613227816131eb565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061328a6024836121c9565b91506132958261322e565b604082019050919050565b600060208201905081810360008301526132b98161327d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006132f66020836121c9565b9150613301826132c0565b602082019050919050565b60006020820190508181036000830152613325816132e9565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006133626019836121c9565b915061336d8261332c565b602082019050919050565b6000602082019050818103600083015261339181613355565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006133f46032836121c9565b91506133ff82613398565b604082019050919050565b60006020820190508181036000830152613423816133e7565b9050919050565b600063ffffffff82169050919050565b60006134458261342a565b91506134508361342a565b92508263ffffffff03821115613469576134686129fe565b5b828201905092915050565b600061347f8261342a565b915061348a8361342a565b92508163ffffffff04831182151516156134a7576134a66129fe565b5b828202905092915050565b6000819050919050565b6134c5816134b2565b82525050565b600067ffffffffffffffff82169050919050565b6134e8816134cb565b82525050565b600061ffff82169050919050565b613505816134ee565b82525050565b6135148161342a565b82525050565b600060a08201905061352f60008301886134bc565b61353c60208301876134df565b61354960408301866134fc565b613556606083018561350b565b613563608083018461350b565b9695505050505050565b60008151905061357c81612279565b92915050565b600060208284031215613598576135976120f9565b5b60006135a68482850161356d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006135d6826135af565b6135e081856135ba565b93506135f08185602086016121da565b6135f98161220d565b840191505092915050565b60006080820190506136196000830187612304565b6136266020830186612304565b61363360408301856120c5565b818103606083015261364581846135cb565b905095945050505050565b60008151905061365f8161212f565b92915050565b60006020828403121561367b5761367a6120f9565b5b600061368984828501613650565b91505092915050565b600061369d826120bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136cf576136ce6129fe565b5b600182019050919050565b60006136e5826120bb565b91506136f0836120bb565b925082613700576136ff612dc9565b5b828204905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137416020836121c9565b915061374c8261370b565b602082019050919050565b6000602082019050818103600083015261377081613734565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006137ad601c836121c9565b91506137b882613777565b602082019050919050565b600060208201905081810360008301526137dc816137a0565b905091905056fea26469706673582212203d119499842aaec039cdad1d366155a3a98890a9e4d81c60e6ee9f42236c812264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 285,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 287,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 291,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 295,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 305,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1273,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 154,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2006,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "vrfInitialized",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2009,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(VRFCoordinatorV2Interface)146"
      },
      {
        "astId": 2011,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 2032,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "randomWords",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2034,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "requestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2037,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2040,
        "contract": "contracts/LoopNFT.sol:LoopNFT",
        "label": "characterUris",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(VRFCoordinatorV2Interface)146": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}